##substitution cipher

import string
dict = {}
data = ""
file = open("op_file.txt", "w")
for i in range(len(string.ascii_letters)):
    dict[string.ascii_letters[i]] = string.ascii_letters[i]
print(dict)
with open("ip_file.txt") as f:
    while True:
        c = f.read(1)
        if not c:
            print("End of file")
            break
        if c in dict:
            data = dict[c]
        else:
            data = c
        file.write(data)
        print(data)
file.close()

##tic-toe problem

import numpy

board = numpy.array([['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']])
p1s = 'X'
p2s = 'O'

def place(symbol):
    print(numpy.matrix(board))
    while True:
        row = int(input('Enter row – 1, 2, or 3: '))
        col = int(input('Enter column – 1, 2, or 3: '))
        if 0 < row < 4 and 0 < col < 4 and board[row-1][col-1] == '-':
            break
        else:
            print('Invalid input. Please enter again.')
    board[row-1][col-1] = symbol

def check_rows(symbol):
    for r in range(3):
        if all(board[r][c] == symbol for c in range(3)):
            print(symbol, 'won!')
            return True
    return False

def check_cols(symbol):
    for c in range(3):
        if all(board[r][c] == symbol for r in range(3)):
            print(symbol, 'won!')
            return True
    return False

def check_diagonals(symbol):
    if (board[0][0] == symbol and board[1][1] == symbol and board[2][2] == symbol) or \
       (board[0][2] == symbol and board[1][1] == symbol and board[2][0] == symbol):
        print(symbol, 'won!')
        return True
    return False

def won(symbol):
    return check_rows(symbol) or check_cols(symbol) or check_diagonals(symbol)

def place(symbol):
    print(numpy.matrix(board))
    while True:
        row = int(input('Enter row – 1, 2, or 3: '))
        col = int(input('Enter column – 1, 2, or 3: '))
        if 0 < row < 4 and 0 < col < 4 and board[row-1][col-1] == '-':
            break
        else:
            print('Invalid input. Please enter again.')
    board[row-1][col-1] = symbol

def play():
    for turn in range(9):
        if turn % 2 == 0:
            print("X's turn")
            place(p1s)
            if won(p1s):
                break
        else:
            print("O's turn")
            place(p2s)
            if won(p2s):
                break
    else:
        print('It\'s a draw!')
play()

##Recurssion with base case 

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

n = int(input('Enter a positive number: '))
if n < 0:
    print('Factorial is not defined for negative numbers')
else:
    f = factorial(n)
    print('Factorial of', n, 'is', f)

##Recursion without base case

def factorial(n):
    product = 1
    for i in range(1, n + 1):
        product = product * i
    return product

n = int(input('Enter a positive number: '))
if n < 0:
    print('Factorial is not defined for negative numbers')
else:
    f = factorial(n)
    print('Factorial of', n, 'is', f)

##binary search

def binary_search(l, x, start, end):

    if start == end:
        if l[start] == x:
            return start
        else:
            return -1
    else:
        mid = int((start + end) / 2)
        if l[mid] == x:
            return mid
        elif l[mid] > x:
            return binary_search(l, x, start, mid - 1)
        else:
            return binary_search(l, x, mid + 1, end)

l = [20, 45, 60, 70, 90]
x = int(input('Enter search key: '))
index = binary_search(l, x, 0, len(l) - 1)
if index == -1:
    print(x, 'not found')
else:
    print(x, 'is found at position', index + 1)

##fibonacci series

def fibonacci(n):
    if n < 2:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

n = int(input('Enter a non-negative number: '))
if n < 0:
    print('Fibonacci numbers are undefined for negative numbers')
else:
    print('Fibonacci number at position', n, 'is', fibonacci(n))





