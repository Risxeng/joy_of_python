##substitution cipher

import string
dict = {}
data = ""
file = open("op_file.txt", "w")
for i in range(len(string.ascii_letters)):
    dict[string.ascii_letters[i]] = string.ascii_letters[i]
print(dict)
with open("ip_file.txt") as f:
    while True:
        c = f.read(1)
        if not c:
            print("End of file")
            break
        if c in dict:
            data = dict[c]
        else:
            data = c
        file.write(data)
        print(data)
file.close()

##tic-toe problem

import numpy

board = numpy.array([['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']])
p1s = 'X'
p2s = 'O'

def place(symbol):
    print(numpy.matrix(board))
    while True:
        row = int(input('Enter row – 1, 2, or 3: '))
        col = int(input('Enter column – 1, 2, or 3: '))
        if 0 < row < 4 and 0 < col < 4 and board[row-1][col-1] == '-':
            break
        else:
            print('Invalid input. Please enter again.')
    board[row-1][col-1] = symbol

def check_rows(symbol):
    for r in range(3):
        if all(board[r][c] == symbol for c in range(3)):
            print(symbol, 'won!')
            return True
    return False

def check_cols(symbol):
    for c in range(3):
        if all(board[r][c] == symbol for r in range(3)):
            print(symbol, 'won!')
            return True
    return False

def check_diagonals(symbol):
    if (board[0][0] == symbol and board[1][1] == symbol and board[2][2] == symbol) or \
       (board[0][2] == symbol and board[1][1] == symbol and board[2][0] == symbol):
        print(symbol, 'won!')
        return True
    return False

def won(symbol):
    return check_rows(symbol) or check_cols(symbol) or check_diagonals(symbol)

def place(symbol):
    print(numpy.matrix(board))
    while True:
        row = int(input('Enter row – 1, 2, or 3: '))
        col = int(input('Enter column – 1, 2, or 3: '))
        if 0 < row < 4 and 0 < col < 4 and board[row-1][col-1] == '-':
            break
        else:
            print('Invalid input. Please enter again.')
    board[row-1][col-1] = symbol

def play():
    for turn in range(9):
        if turn % 2 == 0:
            print("X's turn")
            place(p1s)
            if won(p1s):
                break
        else:
            print("O's turn")
            place(p2s)
            if won(p2s):
                break
    else:
        print('It\'s a draw!')

# Start the game
play()




